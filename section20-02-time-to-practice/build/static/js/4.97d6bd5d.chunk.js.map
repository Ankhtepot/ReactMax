{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","path","exact","to","url","component"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yICgDXC,EA1CQ,SAACC,GACpB,IAAMC,EAAiBC,mBAEvB,EAAqCC,YAAQC,KAAtCC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,MAEpBC,EAAmBR,EAAnBQ,eAERC,qBAAU,WACS,cAAXH,GAA2BC,GAC3BC,MAEL,CAACF,EAAQC,EAAOC,IAGnB,IAAME,EAAoB,SAACC,GACvBA,EAAMC,iBAIN,IAAMC,EAAcZ,EAAea,QAAQC,MAE3CV,EACI,CACIW,YAAa,CAACC,KAAMJ,GACpBK,QAASlB,EAAMkB,WAI3B,OACI,uBAAMC,UAAWC,IAAQC,KAAMC,SAAUZ,EAAzC,UACgB,YAAXJ,GAAwB,qBAAKa,UAAU,WAAf,SAA0B,cAACI,EAAA,EAAD,MACnD,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUZ,EAA3C,UACI,uBAAOe,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAK3B,OAEzC,qBAAKkB,UAAWC,IAAQS,QAAxB,SACI,wBAAQV,UAAU,MAAlB,+B,iBCjCDW,EARK,SAAC9B,GACnB,OACE,oBAAImB,UAAWC,IAAQW,KAAvB,SACE,4BAAI/B,EAAMiB,U,iBCQDe,EAVM,SAAChC,GACpB,OACE,oBAAImB,UAAWC,IAAQa,SAAvB,SACGjC,EAAMiC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQT,UCwDnBU,EArDE,WAEb,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAoDpC,YAAQqC,KAArDnC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcmC,EAAlC,EAA4BC,KAErBxB,EAAWyB,cAAXzB,QAEPT,qBAAU,WACNJ,EAAYa,KACb,CAACb,EAAaa,IAEjB,IAQIe,EAJEW,EAAsBC,uBAAY,WAChCxC,EAAYa,KACd,CAACb,EAAaa,IAkBpB,MAde,YAAXZ,IACA2B,EAAW,qBAAKd,UAAU,WAAf,SACP,cAACI,EAAA,EAAD,OAIO,cAAXjB,IAA2BmC,GAAkBA,EAAeK,OAAS,KACrEb,EAAW,cAAC,EAAD,CAAcA,SAAUQ,KAGxB,cAAXnC,GAA4BmC,GAA4C,IAA1BA,EAAeK,SAC7Db,EAAW,mBAAGd,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQa,SAA5B,UACI,gDACEK,GACE,wBAAQnB,UAAU,MAAM4B,QA5BL,WAC3BR,GAAmB,IA2BX,2BAIHD,GACD,cAAC,EAAD,CACIpB,QAASA,EACTV,eAAgBoC,IAEnBX,M,iBC/CEe,EATU,SAAChD,GACxB,OACE,yBAAQmB,UAAWC,IAAQ6B,MAA3B,UACE,4BAAIjD,EAAMiB,OACV,qCAAajB,EAAMkD,aC4CVC,UAzCf,SAAqBnD,GACjB,IAAMoD,EAAQC,cAGNnC,EAFOyB,cAEPzB,QAER,EAAwDf,YAAQmD,KAAgB,GAAzEjD,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAciD,EAAlC,EAA4Bb,KAAmBnC,EAA/C,EAA+CA,MAQ/C,OANAE,qBAAU,WACNJ,EAAaa,KACd,CAACb,EAAaa,IAEjBsC,QAAQC,IAAIL,GAEG,YAAX9C,EACO,qBAAKa,UAAU,WAAf,SACH,cAACI,EAAA,EAAD,MAIJhB,EACO,mBAAGY,UAAU,WAAb,SAAyBZ,IAG/BgD,EAAYtC,KAKb,qCACI,cAAC,EAAD,CAAkBA,KAAMsC,EAAYtC,KAAMiC,OAAQK,EAAYL,SAC9D,cAAC,IAAD,CAAOQ,KAAMN,EAAMM,KAAMC,OAAK,EAA9B,SACI,qBAAKxC,UAAU,WAAf,SACI,cAAC,IAAD,CAAMA,UAAU,YAAYyC,GAAE,UAAKR,EAAMS,IAAX,aAA9B,8BAGR,cAAC,IAAD,CAAOH,KAAI,UAAKN,EAAMM,KAAX,aAA4BI,UAAW1B,OAX/C","file":"static/js/4.97d6bd5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1k7eH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3RSnZ\",\"loading\":\"NewCommentForm_loading__iRsvg\",\"control\":\"NewCommentForm_control__3_uMk\",\"actions\":\"NewCommentForm_actions__1CNeV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3PN4I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3THTi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1D27W\"};","import {useEffect, useRef} from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n\n    const {sendRequest, status, error} = useHttp(addComment)\n\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        // optional: Could validate here\n\n        const enteredText = commentTextRef.current.value;\n\n        sendRequest(\n            {\n                commentData: {text: enteredText},\n                quoteId: props.quoteId\n            })\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && <div className='centered'><LoadingSpinner/></div> }\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor=\"comment\">Your Comment</label>\n                <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className=\"btn\">Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import {useCallback, useEffect, useState} from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport {useParams} from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport {getAllComments} from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n    // const params = useParams();\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n    const {quoteId} = useParams();\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addedCommentHandler = useCallback(() => {\n            sendRequest(quoteId);\n        },[sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === 'pending') {\n        comments = <div className=\"centered\">\n            <LoadingSpinner/>\n        </div>;\n    }\n\n    if (status === 'completed' && (loadedComments || loadedComments.length > 0)) {\n        comments = <CommentsList comments={loadedComments}/>;\n    }\n\n    if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n        comments = <p className=\"centered\">No comments were added yet.</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className=\"btn\" onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment &&\n            <NewCommentForm\n                quoteId={quoteId}\n                onAddedComment={addedCommentHandler}\n            />}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// import classes from './QuoteDetail.module.css';\r\nimport {Link, Route, useParams, useRouteMatch} from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from '../hooks/use-http';\r\nimport {getSingleQuote} from '../lib/api';\r\nimport {useEffect} from 'react';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nfunction QuoteDetail(props) {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n\r\n    const { quoteId } = params;\r\n\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest( quoteId);\r\n    }, [sendRequest, quoteId])\r\n\r\n    console.log(match);\r\n\r\n    if (status === 'pending') {\r\n        return <div className='centered'>\r\n            <LoadingSpinner />\r\n        </div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>{error}</p>;\r\n    }\r\n\r\n    if (!loadedQuote.text) {\r\n        return <p>No Quote found!</p>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\r\n            <Route path={match.path} exact >\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comment</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`} component={Comments}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}